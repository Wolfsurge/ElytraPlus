plugins {
    id 'java'
    id 'fabric-loom' version '1.3.+'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.9.10'
}

version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://maven.quiltmc.org/repository/release/' }
    maven { url 'https://jitpack.io' }

    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }

    maven {
        name = "Ladysnake Libs"
        url = 'https://maven.ladysnake.org/releases'
    }

    flatDir {
        dirs 'lib'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings(loom.layered {
        mappings("org.quiltmc:quilt-mappings:1.20.1+build.23:intermediary-v2")
        officialMojangMappings()
    })

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.kotlin_language_fabric}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // mod dependencies
    modImplementation name: 'lootify-0.1.2+1.20.1'
    modImplementation "dev.emi:trinkets:${project.trinkets_version}"

    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.9.10'
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version

    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = targetJavaVersion
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)

    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }

    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {}
}

compileKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }
}
